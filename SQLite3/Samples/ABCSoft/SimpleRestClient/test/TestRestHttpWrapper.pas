unit TestRestHttpWrapper;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit 
  being tested.

}

interface

uses
  TestFramework, IdHttp, Data.DBXJSON, IdAuthentication, Classes, SysUtils,
  RestRequest, IdMultipartFormData, IdURI;

type
  // Test methods for class TRestRequest

  TestTRestRequest = class(TTestCase)
  strict private
    FRestRequest: TRestRequest;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published
    procedure TestDomain;
    procedure TestPath;
    procedure TestMultiPath;
    procedure TestSingleParam;
    procedure TestMultiParam;
    procedure TestWithCredentials;
    procedure TestGet;
    procedure TestPut;
    procedure TestPost;
    procedure TestDelete;
  end;

implementation

procedure TestTRestRequest.SetUp;
begin
  FRestRequest := TRestRequest.Create;
end;

procedure TestTRestRequest.TearDown;
begin
  FRestRequest.Free;
  FRestRequest := nil;
end;

procedure TestTRestRequest.TestDomain;
var
  Request: TRestRequest;
  aDomain: string;
begin
  aDomain := 'api.test.com';
  FRestRequest := FRestRequest.Domain(aDomain);
  Assert(FRestRequest.FullUrl = 'http://api.test.com', 'Domain test: ' + FRestRequest.FullUrl);
end;

procedure TestTRestRequest.TestPath;
var
  ReturnValue: TRestRequest;
  aPath: string;
begin
  aPath := 'player';
  FRestRequest := FRestRequest.Path(aPath);
  Assert(FRestRequest.FullUrl = 'http:///' + aPath, 'Single Path Test: ' + FRestRequest.FullUrl);
end;

procedure TestTRestRequest.TestSingleParam;
var
  ReturnValue: TRestRequest;
  aValue: string;
  aKey: string;
  Expected: string;
begin
  aKey := 'limit';
  aValue := '20';
  ReturnValue := FRestRequest.Param(aKey, aValue);
  Expected := 'http://?' + aKey + '=' + aValue;
  Assert(FRestRequest.FullUrl = Expected, 'Single Param Test: ' + FRestRequest.FullUrl + ' - Expected: ' + Expected);
end;

procedure TestTRestRequest.TestWithCredentials;
var
  ReturnValue: TRestRequest;
  password: string;
  username: string;
begin
  // TODO: Setup method call parameters
  ReturnValue := FRestRequest.WithCredentials(username, password);
  // TODO: Validate method results
end;


procedure TestTRestRequest.TestGet;
var
  ReturnValue: THttpResponse;
begin
  //ReturnValue := FRestRequest.Get;
  // TODO: Validate method results
end;

procedure TestTRestRequest.TestMultiParam;
var
  ReturnValue: TRestRequest;
  aValue1, aValue2: string;
  aKey1, aKey2: string;
  Expected: string;
begin
  // Param 1
  aKey1 := 'limit';
  aValue1 := '20';
  // Param 2
  aKey2 := 'type';
  aValue2 := 'member';
  ReturnValue := FRestRequest.Param(aKey1, aValue1).Param(aKey2, aValue2);
  Expected := 'http://?' + aKey1 + '=' + aValue1 + '&' + aKey2 + '=' + aValue2;
  Assert(FRestRequest.FullUrl = Expected, 'Single Param Test: ' + FRestRequest.FullUrl + ' - Expected: ' + Expected);

end;

procedure TestTRestRequest.TestMultiPath;
var
  ReturnValue: TRestRequest;
  aPath, aPath2: string;
begin
  aPath := 'player';
  aPath2 := '1';
  FRestRequest := FRestRequest.Path(aPath).Path(aPath2);
  Assert(FRestRequest.FullUrl = 'http:///' + aPath + '/' + aPath2, 'Double Path Test: ' + FRestRequest.FullUrl);
end;

procedure TestTRestRequest.TestPut;
var
  ReturnValue: THttpResponse;
  aParams: TStringList;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FRestRequest.Put(aParams);
  // TODO: Validate method results
end;

procedure TestTRestRequest.TestPost;
var
  ReturnValue: THttpResponse;
  aParams: TStringList;
begin
  // TODO: Setup method call parameters
  //ReturnValue := FRestRequest.Post(aParams);
  // TODO: Validate method results
end;

procedure TestTRestRequest.TestDelete;
var
  ReturnValue: THttpResponse;
begin
  //ReturnValue := FRestRequest.Delete;
  // TODO: Validate method results
end;

initialization
  // Register any test cases with the test runner
  RegisterTest(TestTRestRequest.Suite);
end.

