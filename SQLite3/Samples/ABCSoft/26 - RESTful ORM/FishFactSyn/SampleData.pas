/// it's a good practice to put all data definition into a stand-alone unit
// - this unit will be shared between client and server
unit SampleData;

interface

uses
  SynCommons,
  mORMot;

type
  /// here we declare the class containing the data
  // - it just has to inherits from TSQLRecord, and the published
  // properties will be used for the ORM (and all SQL creation)
  // - the beginning of the class name must be 'TSQL' for proper table naming
  // in client/server environnment
  TSQLBiolife = class(TSQLRecord)
  private
    fSpecies_No: Integer;
    fCategory: RawUTF8;
    fCommon_Name: RawUTF8;
    fSpecies_Name: RawUTF8;
    fLength_cm: double;
    fLength_in: double;
    fNotes: RawUTF8;
    fGraphic: TSQLRawBlob;
    fSom: TSQLRawBlob;
  published
    property Species_No: Integer read fSpecies_No write fSpecies_No;
    property Category: RawUTF8 index 15 read fCategory write fCategory;
    property Common_Name: RawUTF8 index 30 read fCommon_Name write fCommon_Name;
    property Species_Name: RawUTF8 index 40 read fSpecies_Name write fSpecies_Name;
    property Length_cm: Double read fLength_Cm write fLength_Cm;
    property Length_In: Double read fLength_In write fLength_In;
    property Notes: RawUTF8 read fNotes write fNotes;
    property Graphic: TSQLRawBlob read fGraphic write fGraphic;
    property Som: TSQLRawBlob read fSom write fSom;
  end;


  /// SALT_BOOKMOB Table
  // - type definition auto-generated by SynDBExplorer 1.18.2543 at 2016-05-23 18:25:56
  // from SALT_BOOKMOB
  // - note that the ORM will add one missing ID field via:
  // $ ALTER TABLE SALT_BOOKMOB ADD ID INT NOT NULL
  TSQLSALT_BOOKMOB = class(TSQLRecord)
  protected
    fBOORUN: Int64;
    fRECSEQ: Int64;
    fBOOCUS: RawUTF8;
    fBOOPID: RawUTF8;
    fBOOEMA: RawUTF8;
    fBOOMOB: RawUTF8;
    fBOOVOU: RawUTF8;
    fBOONTR: RawUTF8;
    fBOOREM: RawUTF8;
    fBOOINF: RawUTF8;
    fBOODTR: TDateTime;
    fPRDCDE: RawUTF8;
    fBOOQTY: Int64;
    fBOOQPA: Int64;
    fBOOPAX: RawUTF8;
    fBOOFOC: Int64;
    fBOOQFO: Int64;
    fBOOQAD: Int64;
    fBOOPAD: Currency;
    fBOOQCH: Int64;
    fBOOPCH: Currency;
    fBOOTOT: Currency;
    fBOOVAT: Currency;
    fBOODAM: Currency;
    fBOODRA: RawUTF8;
    fBOOAMT: Currency;
    fBOONTO: Currency;
    fPRDRUN: Int64;
    fPRDNAT: RawUTF8;
    fPACRUN: Int64;
    fUNIRUN: Int64;
    fUNINAM: RawUTF8;
    fWH0RUN: Int64;
    fCMPCDE: RawUTF8;
    fCMPBRN: RawUTF8;
    fCMPDEP: RawUTF8;
    fCMPSEC: RawUTF8;
    fENTUSR: RawUTF8;
    fENTDTE: TDateTime;
    fENTTIM: TDateTime;
    fENTWKS: RawUTF8;
    fMODUSR: RawUTF8;
    fMODDTE: TDateTime;
    fMODTIM: TDateTime;
    fMODWKS: RawUTF8;
    fRECACT: RawUTF8;
    fRECSTS: RawUTF8;
    fRECFL1: RawUTF8;
    fRECFL2: RawUTF8;
    fRECFL3: RawUTF8;
    fRECFL4: RawUTF8;
    fRECFL5: RawUTF8;
    fENTUID: Int64;
    fMODUID: Int64;
  published
    /// match SALT_BOOKMOB.BOORUN [int 0 19 0] *
    property BOORUN: Int64 read fBOORUN write fBOORUN;
    /// match SALT_BOOKMOB.RECSEQ [int 0 10 0] *
    property RECSEQ: Int64 read fRECSEQ write fRECSEQ;
    /// match SALT_BOOKMOB.BOOCUS [nvarchar 200 0 0]
    property BOOCUS: RawUTF8 index 200 read fBOOCUS write fBOOCUS;
    /// match SALT_BOOKMOB.BOOPID [nvarchar 200 0 0]
    property BOOPID: RawUTF8 index 200 read fBOOPID write fBOOPID;
    /// match SALT_BOOKMOB.BOOEMA [nvarchar 200 0 0]
    property BOOEMA: RawUTF8 index 200 read fBOOEMA write fBOOEMA;
    /// match SALT_BOOKMOB.BOOMOB [nvarchar 200 0 0]
    property BOOMOB: RawUTF8 index 200 read fBOOMOB write fBOOMOB;
    /// match SALT_BOOKMOB.BOOVOU [nvarchar 200 0 0]
    property BOOVOU: RawUTF8 index 200 read fBOOVOU write fBOOVOU;
    /// match SALT_BOOKMOB.BOONTR [nvarchar 1 0 0]
    property BOONTR: RawUTF8 index 1 read fBOONTR write fBOONTR;
    /// match SALT_BOOKMOB.BOOREM [nvarchar 200 0 0]
    property BOOREM: RawUTF8 index 200 read fBOOREM write fBOOREM;
    /// match SALT_BOOKMOB.BOOINF [nvarchar 200 0 0]
    property BOOINF: RawUTF8 index 200 read fBOOINF write fBOOINF;
    /// match SALT_BOOKMOB.BOODTR [date]
    property BOODTR: TDateTime read fBOODTR write fBOODTR;
    /// match SALT_BOOKMOB.PRDCDE [nvarchar 60 0 0]
    property PRDCDE: RawUTF8 index 60 read fPRDCDE write fPRDCDE;
    /// match SALT_BOOKMOB.BOOQTY [int 0 10 0]
    property BOOQTY: Int64 read fBOOQTY write fBOOQTY;
    /// match SALT_BOOKMOB.BOOQPA [int 0 10 0]
    property BOOQPA: Int64 read fBOOQPA write fBOOQPA;
    /// match SALT_BOOKMOB.BOOPAX [nvarchar 10 0 0]
    property BOOPAX: RawUTF8 index 10 read fBOOPAX write fBOOPAX;
    /// match SALT_BOOKMOB.BOOFOC [int 0 10 0]
    property BOOFOC: Int64 read fBOOFOC write fBOOFOC;
    /// match SALT_BOOKMOB.BOOQFO [int 0 10 0]
    property BOOQFO: Int64 read fBOOQFO write fBOOQFO;
    /// match SALT_BOOKMOB.BOOQAD [int 0 10 0]
    property BOOQAD: Int64 read fBOOQAD write fBOOQAD;
    /// match SALT_BOOKMOB.BOOPAD [currency 0 10 4]
    property BOOPAD: Currency read fBOOPAD write fBOOPAD;
    /// match SALT_BOOKMOB.BOOQCH [int 0 10 0]
    property BOOQCH: Int64 read fBOOQCH write fBOOQCH;
    /// match SALT_BOOKMOB.BOOPCH [currency 0 10 4]
    property BOOPCH: Currency read fBOOPCH write fBOOPCH;
    /// match SALT_BOOKMOB.BOOTOT [currency 0 10 4]
    property BOOTOT: Currency read fBOOTOT write fBOOTOT;
    /// match SALT_BOOKMOB.BOOVAT [currency 0 10 4]
    property BOOVAT: Currency read fBOOVAT write fBOOVAT;
    /// match SALT_BOOKMOB.BOODAM [currency 0 10 4]
    property BOODAM: Currency read fBOODAM write fBOODAM;
    /// match SALT_BOOKMOB.BOODRA [nvarchar 30 0 0]
    property BOODRA: RawUTF8 index 30 read fBOODRA write fBOODRA;
    /// match SALT_BOOKMOB.BOOAMT [currency 0 10 4]
    property BOOAMT: Currency read fBOOAMT write fBOOAMT;
    /// match SALT_BOOKMOB.BOONTO [currency 0 10 4]
    property BOONTO: Currency read fBOONTO write fBOONTO;
    /// match SALT_BOOKMOB.PRDRUN [int 0 19 0]
    property PRDRUN: Int64 read fPRDRUN write fPRDRUN;
    /// match SALT_BOOKMOB.PRDNAT [nvarchar 255 0 0]
    property PRDNAT: RawUTF8 index 255 read fPRDNAT write fPRDNAT;
    /// match SALT_BOOKMOB.PACRUN [int 0 19 0]
    property PACRUN: Int64 read fPACRUN write fPACRUN;
    /// match SALT_BOOKMOB.UNIRUN [int 0 19 0]
    property UNIRUN: Int64 read fUNIRUN write fUNIRUN;
    /// match SALT_BOOKMOB.UNINAM [nvarchar 200 0 0]
    property UNINAM: RawUTF8 index 200 read fUNINAM write fUNINAM;
    /// match SALT_BOOKMOB.WH0RUN [int 0 19 0]
    property WH0RUN: Int64 read fWH0RUN write fWH0RUN;
    /// match SALT_BOOKMOB.CMPCDE [nvarchar 5 0 0]
    property CMPCDE: RawUTF8 index 5 read fCMPCDE write fCMPCDE;
    /// match SALT_BOOKMOB.CMPBRN [nvarchar 5 0 0]
    property CMPBRN: RawUTF8 index 5 read fCMPBRN write fCMPBRN;
    /// match SALT_BOOKMOB.CMPDEP [nvarchar 5 0 0]
    property CMPDEP: RawUTF8 index 5 read fCMPDEP write fCMPDEP;
    /// match SALT_BOOKMOB.CMPSEC [nvarchar 5 0 0]
    property CMPSEC: RawUTF8 index 5 read fCMPSEC write fCMPSEC;
    /// match SALT_BOOKMOB.ENTUSR [nvarchar 60 0 0]
    property ENTUSR: RawUTF8 index 60 read fENTUSR write fENTUSR;
    /// match SALT_BOOKMOB.ENTDTE [date]
    property ENTDTE: TDateTime read fENTDTE write fENTDTE;
    /// match SALT_BOOKMOB.ENTTIM [date]
    property ENTTIM: TDateTime read fENTTIM write fENTTIM;
    /// match SALT_BOOKMOB.ENTWKS [nvarchar 100 0 0]
    property ENTWKS: RawUTF8 index 100 read fENTWKS write fENTWKS;
    /// match SALT_BOOKMOB.MODUSR [nvarchar 60 0 0]
    property MODUSR: RawUTF8 index 60 read fMODUSR write fMODUSR;
    /// match SALT_BOOKMOB.MODDTE [date]
    property MODDTE: TDateTime read fMODDTE write fMODDTE;
    /// match SALT_BOOKMOB.MODTIM [date]
    property MODTIM: TDateTime read fMODTIM write fMODTIM;
    /// match SALT_BOOKMOB.MODWKS [nvarchar 100 0 0]
    property MODWKS: RawUTF8 index 100 read fMODWKS write fMODWKS;
    /// match SALT_BOOKMOB.RECACT [nvarchar 10 0 0]
    property RECACT: RawUTF8 index 10 read fRECACT write fRECACT;
    /// match SALT_BOOKMOB.RECSTS [nvarchar 10 0 0]
    property RECSTS: RawUTF8 index 10 read fRECSTS write fRECSTS;
    /// match SALT_BOOKMOB.RECFL1 [nvarchar 3 0 0]
    property RECFL1: RawUTF8 index 3 read fRECFL1 write fRECFL1;
    /// match SALT_BOOKMOB.RECFL2 [nvarchar 3 0 0]
    property RECFL2: RawUTF8 index 3 read fRECFL2 write fRECFL2;
    /// match SALT_BOOKMOB.RECFL3 [nvarchar 3 0 0]
    property RECFL3: RawUTF8 index 3 read fRECFL3 write fRECFL3;
    /// match SALT_BOOKMOB.RECFL4 [nvarchar 3 0 0]
    property RECFL4: RawUTF8 index 3 read fRECFL4 write fRECFL4;
    /// match SALT_BOOKMOB.RECFL5 [nvarchar 3 0 0]
    property RECFL5: RawUTF8 index 3 read fRECFL5 write fRECFL5;
    /// match SALT_BOOKMOB.ENTUID [int 0 19 0]
    property ENTUID: Int64 read fENTUID write fENTUID;
    /// match SALT_BOOKMOB.MODUID [int 0 19 0]
    property MODUID: Int64 read fMODUID write fMODUID;
  end;


  TSQLINVM_PROD = class(TSQLRecord)
  protected
   // fPRDRUN: Int64;
    fPRDCDE: RawUTF8;
    fPRDBAR: RawUTF8;
    fPRDNAT: RawUTF8;
    fPRDNAE: RawUTF8;
    fPRDNSE: RawUTF8;
    fMANRUN: Int64;
    fPRDREG: TDateTime;
    fPTYRUN: Int64;
    fUNIRUN: Int64;
    fPRDCOA: Currency;
    fPRDCOU: Currency;
    fROURUN: Int64;
    fVENRUN: Int64;
    fROUCDE: RawUTF8;
    fPSTRUN: RawUTF8;
    fCMPCDE: RawUTF8;
    fCMPBRN: RawUTF8;
    fCMPDEP: RawUTF8;
    fCMPSEC: RawUTF8;
    fENTUSR: RawUTF8;
    fENTDTE: TDateTime;
    fENTTIM: TDateTime;
    fENTWKS: RawUTF8;
    fMODUSR: RawUTF8;
    fMODDTE: TDateTime;
    fMODTIM: TDateTime;
    fMODWKS: RawUTF8;
    fRECACT: RawUTF8;
    fRECSTS: RawUTF8;
    fRECSEQ: Int64;
    fRECFL1: RawUTF8;
    fRECFL2: RawUTF8;
    fRECFL3: RawUTF8;
    fRECFL4: RawUTF8;
    fRECFL5: RawUTF8;
    fENTUID: Int64;
    fMODUID: Int64;
  published
    /// match INVM_PROD.PRDRUN [int 0 19 0] *
//    property PRDRUN: Int64 read fPRDRUN write fPRDRUN;
    /// match INVM_PROD.PRDCDE [nvarchar 60 0 0]
    property PRDCDE: RawUTF8 index 60 read fPRDCDE write fPRDCDE;
    /// match INVM_PROD.PRDBAR [nvarchar 60 0 0]
    property PRDBAR: RawUTF8 index 60 read fPRDBAR write fPRDBAR;
    /// match INVM_PROD.PRDNAT [nvarchar 200 0 0]
    property PRDNAT: RawUTF8 index 200 read fPRDNAT write fPRDNAT;
    /// match INVM_PROD.PRDNAE [nvarchar 200 0 0]
    property PRDNAE: RawUTF8 index 200 read fPRDNAE write fPRDNAE;
    /// match INVM_PROD.PRDNSE [nvarchar 200 0 0]
    property PRDNSE: RawUTF8 index 200 read fPRDNSE write fPRDNSE;
    /// match INVM_PROD.MANRUN [int 0 19 0]
    property MANRUN: Int64 read fMANRUN write fMANRUN;
    /// match INVM_PROD.PRDREG [date]
    property PRDREG: TDateTime read fPRDREG write fPRDREG;
    /// match INVM_PROD.PTYRUN [int 0 19 0]
    property PTYRUN: Int64 read fPTYRUN write fPTYRUN;
    /// match INVM_PROD.UNIRUN [int 0 19 0]
    property UNIRUN: Int64 read fUNIRUN write fUNIRUN;
    /// match INVM_PROD.PRDCOA [currency 0 15 4]
    property PRDCOA: Currency read fPRDCOA write fPRDCOA;
    /// match INVM_PROD.PRDCOU [currency 0 15 4]
    property PRDCOU: Currency read fPRDCOU write fPRDCOU;
    /// match INVM_PROD.ROURUN [int 0 19 0]
    property ROURUN: Int64 read fROURUN write fROURUN;
    /// match INVM_PROD.VENRUN [int 0 19 0]
    property VENRUN: Int64 read fVENRUN write fVENRUN;
    /// match INVM_PROD.ROUCDE [nvarchar 60 0 0]
    property ROUCDE: RawUTF8 index 60 read fROUCDE write fROUCDE;
    /// match INVM_PROD.PSTRUN [nvarchar 60 0 0]
    property PSTRUN: RawUTF8 index 60 read fPSTRUN write fPSTRUN;
    /// match INVM_PROD.CMPCDE [nvarchar 5 0 0]
    property CMPCDE: RawUTF8 index 5 read fCMPCDE write fCMPCDE;
    /// match INVM_PROD.CMPBRN [nvarchar 5 0 0]
    property CMPBRN: RawUTF8 index 5 read fCMPBRN write fCMPBRN;
    /// match INVM_PROD.CMPDEP [nvarchar 5 0 0]
    property CMPDEP: RawUTF8 index 5 read fCMPDEP write fCMPDEP;
    /// match INVM_PROD.CMPSEC [nvarchar 5 0 0]
    property CMPSEC: RawUTF8 index 5 read fCMPSEC write fCMPSEC;
    /// match INVM_PROD.ENTUSR [nvarchar 60 0 0]
    property ENTUSR: RawUTF8 index 60 read fENTUSR write fENTUSR;
    /// match INVM_PROD.ENTDTE [date]
    property ENTDTE: TDateTime read fENTDTE write fENTDTE;
    /// match INVM_PROD.ENTTIM [date]
    property ENTTIM: TDateTime read fENTTIM write fENTTIM;
    /// match INVM_PROD.ENTWKS [nvarchar 100 0 0]
    property ENTWKS: RawUTF8 index 100 read fENTWKS write fENTWKS;
    /// match INVM_PROD.MODUSR [nvarchar 60 0 0]
    property MODUSR: RawUTF8 index 60 read fMODUSR write fMODUSR;
    /// match INVM_PROD.MODDTE [date]
    property MODDTE: TDateTime read fMODDTE write fMODDTE;
    /// match INVM_PROD.MODTIM [date]
    property MODTIM: TDateTime read fMODTIM write fMODTIM;
    /// match INVM_PROD.MODWKS [nvarchar 100 0 0]
    property MODWKS: RawUTF8 index 100 read fMODWKS write fMODWKS;
    /// match INVM_PROD.RECACT [nvarchar 10 0 0]
    property RECACT: RawUTF8 index 10 read fRECACT write fRECACT;
    /// match INVM_PROD.RECSTS [nvarchar 10 0 0]
    property RECSTS: RawUTF8 index 10 read fRECSTS write fRECSTS;
    /// match INVM_PROD.RECSEQ [int 0 10 0]
    property RECSEQ: Int64 read fRECSEQ write fRECSEQ;
    /// match INVM_PROD.RECFL1 [nvarchar 3 0 0]
    property RECFL1: RawUTF8 index 3 read fRECFL1 write fRECFL1;
    /// match INVM_PROD.RECFL2 [nvarchar 3 0 0]
    property RECFL2: RawUTF8 index 3 read fRECFL2 write fRECFL2;
    /// match INVM_PROD.RECFL3 [nvarchar 3 0 0]
    property RECFL3: RawUTF8 index 3 read fRECFL3 write fRECFL3;
    /// match INVM_PROD.RECFL4 [nvarchar 3 0 0]
    property RECFL4: RawUTF8 index 3 read fRECFL4 write fRECFL4;
    /// match INVM_PROD.RECFL5 [nvarchar 3 0 0]
    property RECFL5: RawUTF8 index 3 read fRECFL5 write fRECFL5;
    /// match INVM_PROD.ENTUID [int 0 19 0]
    property ENTUID: Int64 read fENTUID write fENTUID;
    /// match INVM_PROD.MODUID [int 0 19 0]
    property MODUID: Int64 read fMODUID write fMODUID;
  end;

  TSQLINVM_PRICLIST = class(TSQLRecord)
  protected
    //fPLIRUN: Int64;
    fPRDRUN: Int64;
    fUNIRUN: Int64;
    fPGRCDE: RawUTF8;
    fSPGCDE: RawUTF8;
    fITMSEQ: Int64;
    fPCACDE: RawUTF8;
    fPRIRUN: Int64;
    fPRDCDE: RawUTF8;
    fPRTRUN: Int64;
    fPACRUN: Int64;
    fWH0RUN: Int64;
    fPRIVAL: Currency;
    fCMPCDE: RawUTF8;
    fCMPBRN: RawUTF8;
    fCMPDEP: RawUTF8;
    fCMPSEC: RawUTF8;
    fENTUSR: RawUTF8;
    fENTDTE: TDateTimeMS;
    fENTTIM: TDateTimeMS;
    fENTWKS: RawUTF8;
    fMODUSR: RawUTF8;
    fMODDTE: TDateTimeMS;
    fMODTIM: TDateTimeMS;
    fMODWKS: RawUTF8;
    fRECACT: RawUTF8;
    fRECSTS: RawUTF8;
    fRECSEQ: Int64;
    fRECFL1: RawUTF8;
    fRECFL2: RawUTF8;
    fRECFL3: RawUTF8;
    fRECFL4: RawUTF8;
    fRECFL5: RawUTF8;
    fENTUID: Int64;
    fMODUID: Int64;
    fRECREV: RawUTF8;
    fRECRVI: Int64;
  published
    /// match INVM_PRICLIST.PLIRUN [int 0 19 0] *
    //property PLIRUN: Int64 read fPLIRUN write fPLIRUN;
    /// match INVM_PRICLIST.PRDRUN [int 0 19 0] *
    property PRDRUN: Int64 read fPRDRUN write fPRDRUN;
    /// match INVM_PRICLIST.UNIRUN [int 0 19 0] *
    property UNIRUN: Int64 read fUNIRUN write fUNIRUN;
    /// match INVM_PRICLIST.PGRCDE [nvarchar 60 0 0] *
    property PGRCDE: RawUTF8 index 60 read fPGRCDE write fPGRCDE;
    /// match INVM_PRICLIST.SPGCDE [nvarchar 60 0 0] *
    property SPGCDE: RawUTF8 index 60 read fSPGCDE write fSPGCDE;
    /// match INVM_PRICLIST.ITMSEQ [int 0 10 0] *
    property ITMSEQ: Int64 read fITMSEQ write fITMSEQ;
    /// match INVM_PRICLIST.PCACDE [nvarchar 60 0 0] *
    property PCACDE: RawUTF8 index 60 read fPCACDE write fPCACDE;
    /// match INVM_PRICLIST.PRIRUN [int 0 19 0] *
    property PRIRUN: Int64 read fPRIRUN write fPRIRUN;
    /// match INVM_PRICLIST.PRDCDE [nvarchar 60 0 0] *
    property PRDCDE: RawUTF8 index 60 read fPRDCDE write fPRDCDE;
    /// match INVM_PRICLIST.PRTRUN [int 0 19 0]
    property PRTRUN: Int64 read fPRTRUN write fPRTRUN;
    /// match INVM_PRICLIST.PACRUN [int 0 19 0]
    property PACRUN: Int64 read fPACRUN write fPACRUN;
    /// match INVM_PRICLIST.WH0RUN [int 0 19 0]
    property WH0RUN: Int64 read fWH0RUN write fWH0RUN;
    /// match INVM_PRICLIST.PRIVAL [currency 0 18 4]
    property PRIVAL: Currency read fPRIVAL write fPRIVAL;
    /// match INVM_PRICLIST.CMPCDE [nvarchar 5 0 0]
    property CMPCDE: RawUTF8 index 5 read fCMPCDE write fCMPCDE;
    /// match INVM_PRICLIST.CMPBRN [nvarchar 5 0 0]
    property CMPBRN: RawUTF8 index 5 read fCMPBRN write fCMPBRN;
    /// match INVM_PRICLIST.CMPDEP [nvarchar 5 0 0]
    property CMPDEP: RawUTF8 index 5 read fCMPDEP write fCMPDEP;
    /// match INVM_PRICLIST.CMPSEC [nvarchar 5 0 0]
    property CMPSEC: RawUTF8 index 5 read fCMPSEC write fCMPSEC;
    /// match INVM_PRICLIST.ENTUSR [nvarchar 60 0 0]
    property ENTUSR: RawUTF8 index 60 read fENTUSR write fENTUSR;
    /// match INVM_PRICLIST.ENTDTE [date]
    property ENTDTE: TDateTimeMS read fENTDTE write fENTDTE;
    /// match INVM_PRICLIST.ENTTIM [date]
    property ENTTIM: TDateTimeMS read fENTTIM write fENTTIM;
    /// match INVM_PRICLIST.ENTWKS [nvarchar 100 0 0]
    property ENTWKS: RawUTF8 index 100 read fENTWKS write fENTWKS;
    /// match INVM_PRICLIST.MODUSR [nvarchar 60 0 0]
    property MODUSR: RawUTF8 index 60 read fMODUSR write fMODUSR;
    /// match INVM_PRICLIST.MODDTE [date]
    property MODDTE: TDateTimeMS read fMODDTE write fMODDTE;
    /// match INVM_PRICLIST.MODTIM [date]
    property MODTIM: TDateTimeMS read fMODTIM write fMODTIM;
    /// match INVM_PRICLIST.MODWKS [nvarchar 100 0 0]
    property MODWKS: RawUTF8 index 100 read fMODWKS write fMODWKS;
    /// match INVM_PRICLIST.RECACT [nvarchar 10 0 0]
    property RECACT: RawUTF8 index 10 read fRECACT write fRECACT;
    /// match INVM_PRICLIST.RECSTS [nvarchar 10 0 0]
    property RECSTS: RawUTF8 index 10 read fRECSTS write fRECSTS;
    /// match INVM_PRICLIST.RECSEQ [int 0 10 0]
    property RECSEQ: Int64 read fRECSEQ write fRECSEQ;
    /// match INVM_PRICLIST.RECFL1 [nvarchar 3 0 0]
    property RECFL1: RawUTF8 index 3 read fRECFL1 write fRECFL1;
    /// match INVM_PRICLIST.RECFL2 [nvarchar 3 0 0]
    property RECFL2: RawUTF8 index 3 read fRECFL2 write fRECFL2;
    /// match INVM_PRICLIST.RECFL3 [nvarchar 3 0 0]
    property RECFL3: RawUTF8 index 3 read fRECFL3 write fRECFL3;
    /// match INVM_PRICLIST.RECFL4 [nvarchar 3 0 0]
    property RECFL4: RawUTF8 index 3 read fRECFL4 write fRECFL4;
    /// match INVM_PRICLIST.RECFL5 [nvarchar 3 0 0]
    property RECFL5: RawUTF8 index 3 read fRECFL5 write fRECFL5;
    /// match INVM_PRICLIST.ENTUID [int 0 19 0]
    property ENTUID: Int64 read fENTUID write fENTUID;
    /// match INVM_PRICLIST.MODUID [int 0 19 0]
    property MODUID: Int64 read fMODUID write fMODUID;
    /// match INVM_PRICLIST.RECREV [nvarchar 3 0 0]
    property RECREV: RawUTF8 index 3 read fRECREV write fRECREV;
    /// match INVM_PRICLIST.RECRVI [int 0 10 0]
    property RECRVI: Int64 read fRECRVI write fRECRVI;
  end;



/// an easy way to create a database model for client and server
function CreateSampleModel(HttpRoot: RawUTF8): TSQLModel;


implementation

function CreateSampleModel(HttpRoot: RawUTF8): TSQLModel;
begin
  result := TSQLModel.Create([TSQLINVM_PROD,TSQLINVM_PRICLIST], HttpRoot);
end;

end.